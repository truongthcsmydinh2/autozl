import time
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Optional

DUMP_DIR = Path("debug_dumps")

# C√°c kh√≥a nh·∫≠n di·ªán trong resource-id/text
RID_CHAT_INPUT_KEY = "chatinput_text"            # ƒê√£ l√† b·∫°n
RID_ADD_FRIEND_KEY = "btn_send_friend_request"   # Ch∆∞a l√† b·∫°n
LIMITED_TEXT_KEYS = [
    "B·∫°n ch∆∞a th·ªÉ xem nh·∫≠t k√Ω",                   # Ti·∫øng Vi·ªát
    "You can't view",                             # Ti·∫øng Anh
]

def _to_pattern(device_serial: str) -> str:
    if ":" in device_serial:
        ip, port = device_serial.split(":", 1)
        return f"ui_dump_{ip.replace('.', '_')}_{port}_*.xml"
    else:
        return f"ui_dump_{device_serial.replace('.', '_')}_*.xml"

def _latest_dump_file(device_serial: str) -> Optional[Path]:
    """T√¨m file UI dump m·ªõi nh·∫•t cho thi·∫øt b·ªã."""
    pattern = _to_pattern(device_serial)
    candidates = sorted(DUMP_DIR.glob(pattern), key=lambda p: p.stat().st_mtime, reverse=True)
    return candidates[0] if candidates else None

def _parse_xml(path: Path):
    try:
        tree = ET.parse(path)
        return tree.getroot()
    except Exception as e:
        print(f"[ERROR] Kh√¥ng parse ƒë∆∞·ª£c XML: {path} -> {e}")
        return None

def _has_resource_id(root, resource_id: str) -> bool:
    """Ki·ªÉm tra XML tree c√≥ resource-id c·ª• th·ªÉ - s·ª≠ d·ª•ng 'in' comparison."""
    if root is None:
        return False
    for node in root.iter("node"):
        element_resource_id = node.attrib.get('resource-id', '')
        if resource_id in element_resource_id:
            bounds = node.attrib.get('bounds', '')
            print(f"[DEBUG] ‚úÖ Found resource-id contains '{resource_id}' at {bounds}")
            return True
    return False

def _has_text_contains(root, keywords) -> bool:
    if root is None:
        return False
    if isinstance(keywords, str):
        keywords = [keywords]
    for node in root.iter("node"):
        text = (node.attrib.get("text") or "").strip()
        if not text:
            continue
        for kw in keywords:
            if kw in text:
                print(f"[DEBUG] ‚úÖ Found text contains '{kw}' -> '{text}'")
                return True
    return False

def check_friend_status_from_dump(device_serial: str, wait_for_dump_sec: float = 1.5) -> str:
    """
    Tr·∫£ v·ªÅ:
      - 'ALREADY_FRIEND'
      - 'NEED_FRIEND_REQUEST' 
      - 'UNKNOWN' (khi kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ª£c)
    """
    # Validation device_serial
    if not device_serial or not isinstance(device_serial, str):
        print(f"[ERROR] Invalid device_serial: {device_serial}")
        return "UNKNOWN"
    
    print(f"[DEBUG] üîç Checking friend status for device: {device_serial}")
    
    # 1) L·∫•y file UI dump m·ªõi nh·∫•t
    try:
        dump_path = _latest_dump_file(device_serial)
    except Exception as e:
        print(f"[ERROR] L·ªói khi t√¨m dump file cho {device_serial}: {e}")
        return "UNKNOWN"

    # 2) N·∫øu ch∆∞a c√≥ file, ch·ªù ng·∫Øn r·ªìi t√¨m l·∫°i
    if not dump_path:
        time.sleep(wait_for_dump_sec)
        dump_path = _latest_dump_file(device_serial)

    if not dump_path or not dump_path.exists() or dump_path.stat().st_size < 60:
        print(f"[DEBUG] ‚ùó Ch∆∞a c√≥ UI dump ph√π h·ª£p cho {device_serial} -> fallback UNKNOWN")
        return "UNKNOWN"

    print(f"[DEBUG] üîé Ph√¢n t√≠ch UI dump: {dump_path.name}")

    # 3) Parse v√† ph√¢n t√≠ch
    try:
        root = _parse_xml(dump_path)
        if root is None:
            print(f"[ERROR] ‚ùå Kh√¥ng th·ªÉ parse XML dump: {dump_path}")
            return "UNKNOWN"
    except Exception as e:
        print(f"[ERROR] ‚ùå L·ªói khi parse XML dump {dump_path}: {e}")
        return "UNKNOWN"

    # ƒê√£ l√† b·∫°n
    if _has_resource_id(root, RID_CHAT_INPUT_KEY):
        return "ALREADY_FRIEND"

    # Ch∆∞a l√† b·∫°n
    if _has_resource_id(root, RID_ADD_FRIEND_KEY):
        return "NEED_FRIEND_REQUEST"

    # H·ªì s∆° b·ªã gi·ªõi h·∫°n (kh√¥ng c√≥ n√∫t k·∫øt b·∫°n)
    if _has_text_contains(root, LIMITED_TEXT_KEYS):
        return "NEED_FRIEND_REQUEST"

    # Smart fallback: tr·∫£ v·ªÅ UNKNOWN ƒë·ªÉ debug
    print("[DEBUG] ‚ö†Ô∏è Kh√¥ng match resource-id/text n√†o -> Fallback UNKNOWN")
    return "UNKNOWN"